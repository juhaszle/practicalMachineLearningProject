data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
str(mixture)
str(mixtures)
?mixtures
library(ggplot2)
qplot(CompressiveStrength)
qplot(CompressiveStrength, data=training)
plot(CompressiveStrength, data=training)
plot(training$CompressiveStrength)
?plot
qplot(CompressiveStrength, data=training, geom="points")
plot(training)
summary(training)
package(Hmisc)
library(Hmisc)
factorfly=cut2(training$FlyAsh, g=4)
with(training, plot(CompressiveStrength, col=factorfly))
factorage=cut2(training$Age, g=4)
with(training, plot(CompressiveStrength, col=factorage))
?plot
factorcement=cut2(training$Cement, g=4)
with(training, plot(CompressiveStrength, col=factorcement))
factorblast=cut2(BlastFurnaceSlag, g=4)
factorblast=cut2(training$BlastFurnaceSlag, g=4)
with(training, plot(CompressiveStrength, col=factorblast))
factorbwat=cut2(training$Water, g=4)
with(training, plot(CompressiveStrength, col=factorbwat))
factorsuper=cut2(training$Superplasticizer, g=4)
with(training, plot(CompressiveStrength, col=factorsuper))
factorcoarse=cut2(training$ CoarseAggregate , g=4)
with(training, plot(CompressiveStrength, col=factorcoarse))
factorfine=cut2(training$FineAggregate , g=4)
with(training, plot(CompressiveStrength, col=factorfine))
factorage=cut2(training$Age , g=4)
with(training, plot(CompressiveStrength, col=factorage))
factorfly=cut2(training$FlyAsh, g=4)
with(training, plot(CompressiveStrength, col=factorfly))
rm(list=ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
plot(training$Superplasticizer)
hist(training$Superplasticizer)
log(10)
hist(log(training$Superplasticizer+1))
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
?grep
nms=names(training)
grep("^IL", nms)
vars=grep("^IL", nms)
vars
training2=training[,vars]
training3=data.frame(training$diagnosis, training2)
names(training3)
names(training3)[1]="diagnosis"
names(training3)
head(training3)
?preProcess
preProc<-preProcess(training3[,-1], method="pca", thresh=0.8)
preProc
(summarypreProc)
summary(preProc)
preProc2<-preProcess(log(training3[,-1]+1), method="pca", thresh=0.8)
preProc2
fitpca=train(trainig3$diagnosis~., method="glm", preProcess="pca", data=training3)
head(training3)
fitpca=train(trainig3$diagnosis~., method="glm", preProcess="pca", data= training3)
fitpca=train(training3$diagnosis ~ ., method="glm", preProcess="pca", data= training3)
fitpca
fit=train(training3$diagnosis ~ ., method="glm", data= training3)
fit
testing3=data.frame(testing$diagnosis, testing[,vars])
head(testing3)
names(testing3)[1]="diagnosis"
head(testing3)
confusionMatrix(testing3$diagnosis, predict(fitpca, testing3))
confusionMatrix(testing3$diagnosis, predict(fit, testing3))
sample(1:10)
sample(1:10, replace=T)
sample(1:10, replace=T)
sample(1:10, replace=T)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
data(segmentationOriginal)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
dim(segmentationOriginal)
training=segmentationOriginal[Case=="Train",]
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
dim(training)
testing=segmentationOriginal[segmentationOriginal$Case=="Test",]
dim(testing)
modFit<-train(Class~., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library("rpart.plot")
install.packages("rpart.plot")
library("rpart.plot")
fancyRpartPlot(modFit$finalModel)
rm(list=ls())
library(pgmm)
data(olive)
install.packages("pgmm")
library(pgmm)
data(olive)
head(olive)
?olive
olive = olive[,-1]
head(olive)
modFit<-train(Region~., method="rpart", data=olive)
modFit<-train(olive$Region~., method="rpart", data=olive)
table(olive$region)
table(olive$Region)
modFit<-train(Area~., method="rpart", data=olive)
table(olive$Area)
sum(table(olive$Area))
length(olive$Area)
modFit
print(modFit$finalModel)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
str(olive)
olive$Area=factor(olive$Area)
modFit<-train(Area~., method="rpart", data=olive)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
rm(list=ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(training)
head(trainSA)
?SAheart
vars=c("chd", "age", "alcohol", "obesity", "tobacco", "typea", "ldl")
training=trainSA[,vars]
testing=testSA[,vars]
?train
modelFit<-train(chd~., data=training, method='glm', family='binomial')
print(modelFit$finalModel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictions=predict(modelFit, newdata=testing)
predictionT=predict(modelFit, newdata=testing)
predictionTe=predict(modelFit, newdata=testing)
predictionTr=predict(modelFit, newdata=traning)
predictionTr=predict(modelFit, newdata=training)
missClass(training$chd, predictionTr)
missClass(testing$chd, predictionTe)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
str(vowel.test)
vowel.test$y=factor(vowel.test$y)
str(vowel.test)
vowel.train$y=factor(vowel.train$y)
str(vowel.train)
set.seed(33833)
modFit<-train(y~., data=vowel.train, method="rf", prox="TRUE")
modFit
modFit<-train(vowel.train$y~., data=vowel.train, method="rf", prox="TRUE")
set.seed(33833)
modFit<-train(y~., data=vowel.train, method="rf", prox="TRUE")
warnings()
library(randomForest)
fit <- randomForest((y~., data=vowel.train)
fit <- randomForest(y~., data=vowel.train)
fit
varImp(fit)
order(varImp(fit))
modFit<-train(y~., data=vowel.train, method="rf", prox="TRUE",mtry=3)
modFit<-train(y~., data=vowel.train, method="rf", prox="TRUE",tuneGrid = data.frame(mtry = 3))
modelLookup("rf")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
library(caret)
modFit<-train(as.factor(y)~ ., data=vowel.train, method="rf", prox=TRUE )
varImp(modFit)
?varImp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
dim(vowel.train)
names(vowel.train)
?vowel.train
head(vowel.train)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
library(caret)
modFit <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
modFitgbm <- train(y ~ ., method="gbm",data=vowel.train,verbose=FALSE)
modFitrf
print(modFitrf)
print(modFitgbm)
vowel.train$y=factor(vowel.train$y)
names(vowel.train)
str(vowel.train)
vowel.test$y=factor(vowel.test$y)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
modFitgbm <- train(y ~ ., method="gbm",data=vowel.train,verbose=FALSE)
predrf<-predict(modFitfr, vowel.test)
predrf<-predict(modFitrf, vowel.test)
predrf
table(predrf, vowel.test$y)
confusionMatrix(predrf, vowel.test$y)
predgmb<-predict(modFitgmb, vowel.test)
predgmb<-predict(modFitgbm, vowel.test)
confusionMatrix(predgbm, vowel.test$y)
predgbm<-predict(modFitgbm, vowel.test)
confusionMatrix(predgbm, vowel.test$y)
confusionMatrix(predgbm, predrf)
set.seed(33833)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
modFitgbm <- train(y ~ ., method="gbm",data=vowel.train,verbose=FALSE)
predrf<-predict(modFitrf, vowel.test)
predgbm<-predict(modFitgbm, vowel.test)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(predgbm, vowel.test$y)
confusionMatrix(predgbm, predrf)
confusionMatrix(predgbm, predrf)
rm(list=ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitgbm <- train(diagnosis ~ ., method="gbm",data=training,verbose=FALSE)
modFitlda <- train(diagnosis ~ ., method="lda",data=training)
modFitrf <- train(diagnosis~ .,data=training,method="rf",prox=TRUE)
prf<-predict(modFitrf, testing)
pgbm<-predict(modFitgbm, testing)
pglda<-predict(modFitlda, testing)
predDf=data.frame(prf,pgbm, pglda, diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~., method="rf", data=predDf)
combModFit
combPred=predict(combModFit, predDf)
confusionMatrix(combPred, testing$diagnosis)
combPred=predict(combModFit, predDf)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitgbm <- train(diagnosis ~ ., method="gbm",data=training,verbose=FALSE)
modFitlda <- train(diagnosis ~ ., method="lda",data=training)
modFitrf <- train(diagnosis~ .,data=training,method="rf",prox=TRUE)
prf<-predict(modFitrf, testing)
pgbm<-predict(modFitgbm, testing)
pglda<-predict(modFitlda, testing)
predDf=data.frame(prf,pgbm, pglda, diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~., method="rf", data=predDf)
combPred=predict(combModFit, predDf)
confusionMatrix(combPred, testing$diagnosis)
source('D:/LEVENTE/progInfo/stanford/johnsHopkins/machineLearning/week4/diagnosis.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y=factor(vowel.train$y)
names(vowel.train)
str(vowel.train$y)
str(vowel.train)
names(vowel.train)
vowel.test$y=factor(vowel.test$y)
names(vowel.test)
names(vowel.test)
str(vowel.test)
set.seed(33833)
modFit <- train(y ~ ., method="gbm",data=vowel.train,verbose=FALSE)
modFit <- train(y ~ ., method="gbm",data=vowel.train, verbose=FALSE)
library(ggplot2); library(caret);
modFit <- train(y ~ ., method="gbm",data=vowel.train, verbose=FALSE)
pred=predict(modFit, vowel.test)
pred
confusionMatrix(pred, vowel.test$y)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
predrf=predict(modFitrf, vowel.test)
confusionMatrix(predrf, vowel.test$y)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
set.seed(33833)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
predrf=predict(modFitrf, vowel.test)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(predrf, pred)
library(ElemStatLearn)
library(ggplot2)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.test$y=factor(vowel.test$y)
vowel.train$y=factor(vowel.train$y)
set.seed(33833)
modFit <- train(y ~ ., method="gbm",data=vowel.train,verbose=FALSE)
pred=predict(modFit, vowel.test)
set.seed(33833)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
predrf=predict(modFitrf, vowel.test)
confusionMatrix(pred, vowel.test$y)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(pred, predrf)
library(ElemStatLearn)
library(ggplot2)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.test$y=factor(vowel.test$y)
vowel.train$y=factor(vowel.train$y)
set.seed(0)
set.seed(33833)
modFit <- train(y ~ ., method="gbm",data=vowel.train,verbose=FALSE)
pred=predict(modFit, vowel.test)
set.seed(0)
set.seed(33833)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
predrf=predict(modFitrf, vowel.test)
confusionMatrix(pred, vowel.test$y)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(pred, predrf)
library(ElemStatLearn)
library(ggplot2)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.test$y=factor(vowel.test$y)
vowel.train$y=factor(vowel.train$y)
set.seed(0)
set.seed(33833)
modFit <- train(y ~ ., method="gbm",data=vowel.train,verbose=FALSE)
pred=predict(modFit, vowel.test)
set.seed(0)
set.seed(33833)
modFitrf <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
predrf=predict(modFitrf, vowel.test)
confusionMatrix(pred, vowel.test$y)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(pred, predrf)
sameIndex<-predrf==pred
semeIndex
sameIndex<-predrf==pred
sameIndex
confusionMatrix(predrf[sameIndex], pred[sameIndex])
confusionMatrix(predrf[sameIndex,],vowel.test$y )
confusionMatrix(predrf[sameIndex,],vowel.test$y[sameIndex] )
confusionMatrix(predrf[sameIndex,],vowel.test$y[sameIndex,] )
confusionMatrix(predrf[sameIndex],vowel.test$y[sameIndex] )
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitgbm <- train(diagnosis ~ ., method="gbm",data=training,verbose=FALSE)
modFitlda <- train(diagnosis ~ ., method="lda",data=training)
modFitrf <- train(diagnosis~ .,data=training,method="rf",prox=TRUE)
prf<-predict(modFitrf, testing)
pgbm<-predict(modFitgbm, testing)
pglda<-predict(modFitlda, testing)
predDf=data.frame(prf,pgbm, pglda, diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~., method="rf", data=predDf)
combPred=predict(combModFit, predDf)
confusionMatrix(combPred, testing$diagnosis)
confusionMatrix(prf, testing$diagnosis)
confusionMatrix(pgbm, testing$diagnosis)
confusionMatrix(pglda, testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitgbm <- train(diagnosis ~ ., method="gbm",data=training,verbose=FALSE)
modFitlda <- train(diagnosis ~ ., method="lda",data=training)
modFitrf <- train(diagnosis~ .,data=training,method="rf",prox=TRUE)
prf<-predict(modFitrf, testing)
pgbm<-predict(modFitgbm, testing)
pglda<-predict(modFitlda, testing)
predDf=data.frame(prf,pgbm, pglda, diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~., method="rf", data=predDf)
combPred=predict(combModFit, predDf)
confusionMatrix(combPred, testing$diagnosis)
confusionMatrix(prf, testing$diagnosis)
confusionMatrix(pgbm, testing$diagnosis)
confusionMatrix(pglda, testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modFitgbm <- train(diagnosis ~ ., method="gbm",data=training,verbose=FALSE)
set.seed(62433)
modFitlda <- train(diagnosis ~ ., method="lda",data=training)
set.seed(62433)
modFitrf <- train(diagnosis~ .,data=training,method="rf",prox=TRUE)
prf<-predict(modFitrf, testing)
pgbm<-predict(modFitgbm, testing)
pglda<-predict(modFitlda, testing)
predDf=data.frame(prf,pgbm, pglda, diagnosis=testing$diagnosis)
set.seed(62433)
combModFit<-train(diagnosis~., method="rf", data=predDf)
combPred=predict(combModFit, predDf)
confusionMatrix(prf, testing$diagnosis)
confusionMatrix(pgbm, testing$diagnosis)
confusionMatrix(pglda, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
str(training)
head(training)
head(training)
str(concrete)
str(mixtures)
?plot.enet
set.seed(233)
model
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model<-train(CompressiveStrength~., method='lasso', data=training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model<-train(CompressiveStrength~., method='lasso', data=training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model<-train(CompressiveStrength~., method='lasso', data=training)
model
summary(model)
plot.enet(model)
setwd("D:/LEVENTE/progInfo/stanford/johnsHopkins/machineLearning/practicalmachinelearningPeerAssessment")
url1="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url1="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url1, destfile="pmltraining.csv")
download.file(url2, destfile="pmltesting.csv")
trainData=read.csv("pmltraining.csv")
testData=read.csv("pmltesting.csv")
str(testData)
